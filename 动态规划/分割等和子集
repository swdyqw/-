给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。

 

示例 1：

输入：nums = [1,5,11,5]
输出：true
解释：数组可以分割成 [1, 5, 5] 和 [11] 。

// 能不能装满背包
class Solution {
    public boolean canPartition(int[] nums) {
        // 将数组中的元素认为 是价值也是重量 变成背包问题
        int sum = 0;
        for (int n : nums) {
            sum += n;
        }
        if (sum % 2 != 0)
            return false;
        int target = sum / 2;
        int[] dp = new int[target + 1];
        for (int i = 0; i < nums.length; i++) {
            for (int j = target; j >= nums[i]; j--)
                dp[j] = Math.max(dp[j], dp[j - nums[i]] + nums[i]);
            if (dp[target] == target)
                return true;
                // 剪枝 循环中判断
        }
        if (dp[target] == target)
            return true;
        else
            return false;
    }
}
