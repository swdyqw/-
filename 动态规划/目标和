给你一个非负整数数组 nums 和一个整数 target 。

向数组中的每个整数前添加 '+' 或 '-' ，然后串联起所有整数，可以构造一个 表达式 ：

例如，nums = [2, 1] ，可以在 2 之前添加 '+' ，在 1 之前添加 '-' ，然后串联起来得到表达式 "+2-1" 。
返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。


// 装满背包有多少种方法
class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        // 分成正数负数两个集合，分别是left right
        // 有如下表达式
        // left+right=sum
        // left-right=target
        // 推出 left = (sum+target)/2
        // 背包容量为left
        int sum = 0;
        for (int n : nums) {
            sum += n;
        }
        int left = (sum + target) / 2;
        if ((sum + target) % 2 == 1)
            return 0;
        if (target < 0 && sum + target < 0)
            return 0;
        int[] dp = new int[left + 1];
        dp[0] = 1;
        for (int i = 0; i < nums.length; i++) {
            for (int j = left; j >= nums[i]; j--)
                dp[j] += dp[j - nums[i]];
        }
        return dp[left];
    }
}
