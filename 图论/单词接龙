字典 wordList 中从单词 beginWord 和 endWord 的 转换序列 是一个按下述规格形成的序列 beginWord -> s1 -> s2 -> ... -> sk：

每一对相邻的单词只差一个字母。
 对于 1 <= i <= k 时，每个 si 都在 wordList 中。注意， beginWord 不需要在 wordList 中。
sk == endWord
给你两个单词 beginWord 和 endWord 和一个字典 wordList ，返回 从 beginWord 到 endWord 的 最短转换序列 中的 单词数目 。如果不存在这样的转换序列，返回 0 


class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        HashSet<String> set = new HashSet<>(wordList);
        // 转换为set 提高查找效率
        HashMap<String, Integer> map = new HashMap<>();
        // 存路径长度
        Deque<String> que = new ArrayDeque<>();
        if (set.size() == 0 || !set.contains(endWord)) { // 特殊情况判断
            return 0;
        }
        que.offer(beginWord);
        map.put(beginWord, 1);
        while (!que.isEmpty()) {
            String curStr = que.poll();
            int path = map.get(curStr);
            for (int i = 0; i < curStr.length(); i++) {
                char[] chars = curStr.toCharArray();
                for (char k = 'a'; k <= 'z'; k++) {
                    chars[i] = k;
                    String newWord = String.valueOf(chars);
                    if (newWord.equals(endWord))
                        return path + 1;
                    if (set.contains(newWord) && !map.containsKey(newWord)) {
                        map.put(newWord, path + 1);
                        que.offer(newWord);
                    }
                }
            }
        }
        return 0;
    }
}
