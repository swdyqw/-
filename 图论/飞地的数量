给你一个大小为 m x n 的二进制矩阵 grid ，其中 0 表示一个海洋单元格、1 表示一个陆地单元格。

一次 移动 是指从一个陆地单元格走到另一个相邻（上、下、左、右）的陆地单元格或跨过 grid 的边界。

返回网格中 无法 在任意次数的移动中离开网格边界的陆地单元格的数量。


class Solution {
    // int[][] move = {
    //         { 0, 1 }, // right
    //         { 1, 0 }, // down
    //         { 0, -1 }, // left
    //         { -1, 0 } // up
    // };
    int count;

    // public int numEnclaves(int[][] grid) {
    //     boolean[][] visited = new boolean[grid.length][grid[0].length];
    //     int rowSize = grid.length;
    //     int colSize = grid[0].length;
    //     for (int i = 0; i < rowSize; i++) {
    //         if (!visited[i][0] && grid[i][0] == 1) {
    //             visited[i][0] = true;
    //             dfs(grid, i, 0, visited);
    //         }
    //         if (!visited[i][colSize - 1] && grid[i][colSize - 1] == 1) {
    //             visited[i][colSize - 1] = true;
    //             dfs(grid, i, colSize - 1, visited);
    //         }
    //     }
    //     for (int i = 1; i < colSize - 1; i++) {
    //         if (!visited[0][i] && grid[0][i] == 1) {
    //             visited[0][i] = true;
    //             dfs(grid, 0, i, visited);
    //         }
    //         if (!visited[rowSize - 1][i] && grid[rowSize - 1][i] == 1) {
    //             visited[rowSize - 1][i] = true;
    //             dfs(grid, rowSize - 1, i, visited);
    //         }
    //     }
    //     for (int i = 0; i < rowSize; i++) {
    //         for (int j = 0; j < colSize; j++) {
    //             if (!visited[i][j] && grid[i][j] == 1)
    //                 count++;
    //         }
    //     }
    //     return count;
    // }

    // public void dfs(int[][] grid, int row, int col, boolean[][] visited) {
    //     for (int i = 0; i < 4; i++) {
    //         int newRow = row + move[i][0];
    //         int newCol = col + move[i][1];
    //         if (newRow < 0 || newRow >= grid.length || newCol < 0 || newCol >= grid[0].length)
    //             continue;
    //         if (!visited[newRow][newCol] && grid[newRow][newCol] == 1) {
    //             visited[newRow][newCol] = true;
    //             dfs(grid, newRow, newCol, visited);
    //         }
    //     }
    // }

    // dfs优化 遍历到陆地时淹没 即遍历到1时置0
    public int numEnclaves(int[][] grid) {
        int rowSize = grid.length;
        int colSize = grid[0].length;
        for (int i = 0; i < rowSize; i++) {
            dfs(grid, i, 0);
            dfs(grid, i, colSize - 1);

        }
        for (int i = 1; i < colSize - 1; i++) {
            dfs(grid, 0, i);
            dfs(grid, rowSize - 1, i);
        }
        for (int i = 0; i < rowSize; i++) {
            for (int j = 0; j < colSize; j++) {
                if (grid[i][j] == 1)
                    count++;
            }
        }
        return count;
    }
    public void dfs(int[][] grid,int row,int col){
        if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length||grid[row][col]==0)
            return;
        grid[row][col]=0;
        dfs(grid,row+1,col);
        dfs(grid,row-1,col);
        dfs(grid,row,col+1);
        dfs(grid,row,col-1);
    }
}
