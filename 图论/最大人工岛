给你一个大小为 n x n 二进制矩阵 grid 。最多 只能将一格 0 变成 1 。

返回执行此操作后，grid 中最大的岛屿面积是多少？

岛屿 由一组上、下、左、右四个方向相连的 1 形成。


class Solution {
    private static final int[][] position = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}}; 
    int count;
    public int largestIsland(int[][] grid) {
        int rowSize = grid.length;
        int colSize = grid[0].length;
        // boolean[][] visited = new boolean[rowSize][colSize];
        HashMap<Integer, Integer> map = new HashMap<>();
        // 记录每个被标记的岛屿的面积
        HashSet<Integer> set = new HashSet<>();
        // 检查是否有重复遍历的
        int mark = 2;
        int res = 0;
        int cnt = 1;
        // 遍历0时 0->1 所以岛屿面积至少为1
        for(int i = 0;i<rowSize;i++){
            for(int j = 0;j<colSize;j++){
                if(grid[i][j]==1){
                    count=0;
                    dfs(grid,i,j,mark);
                    map.put(mark++,count);
                }
            }
        }
        for(int i = 0;i<rowSize;i++){
            for(int j = 0;j<colSize;j++){
                if(grid[i][j]!=0) continue;
                grid[i][j]=1;
                cnt = 1;
                set.clear();
                // 需要清空
                for(int k =0;k<4;k++){
                    int nextX = i + position[k][0];
                    int nextY = j + position[k][1];
                    if(0>nextX||nextX>=rowSize||nextY<0||nextY>=colSize) continue;
                    int curMark = grid[nextX][nextY];
                    if(!set.contains(curMark)&&map.containsKey(curMark)){
                        cnt+=map.get(curMark);
                        set.add(curMark);
                    }
                }
                res = Math.max(res,cnt);
            }
        }
        return res == 0 ? rowSize * colSize : res;
    }
    public void dfs(int[][] grid, int row, int col, int mark){
        if(0>row||row>=grid.length||col<0||col>=grid[0].length||grid[row][col]!=1) return;
        grid[row][col] = mark;
        count++;
        dfs(grid,row+1,col,mark);
        dfs(grid,row-1,col,mark);
        dfs(grid,row,col+1,mark);
        dfs(grid,row,col-1,mark);
    }
}

// class Solution {
//     private static final int[][] position = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}}; 
//     int count;
//     public int largestIsland(int[][] grid) {
//         int rowSize = grid.length;
//         int colSize = grid[0].length;
//         HashMap<Integer, Integer> map = new HashMap<>();
//         HashSet<Integer> set = new HashSet<>();
//         int mark = 2;
//         int res = 0;
//         int cnt = 0;
//         for(int i = 0; i < rowSize; i++) {
//             for(int j = 0; j < colSize; j++) {
//                 if(grid[i][j] == 1) {
//                     count = 0;
//                     dfs(grid, i, j, mark);
//                     map.put(mark++, count);
//                 }
//             }
//         }
//         for(int i = 0; i < rowSize; i++) {
//             for(int j = 0; j < colSize; j++) {
//                 if(grid[i][j] != 0) continue;
//                 grid[i][j] = 1;
//                 cnt = 1; // 当前岛屿面积至少为 1
//                 set.clear(); // 清空之前记录的岛屿标记
//                 for(int k = 0; k < 4; k++) { // 遍历四个方向
//                     int nextX = i + position[k][0];
//                     int nextY = j + position[k][1];
//                     if(0 > nextX || nextX >= rowSize || nextY < 0 || nextY >= colSize) continue;
//                     int curMark = grid[nextX][nextY];
//                     if(!set.contains(curMark) && map.containsKey(curMark)) {
//                         cnt += map.get(curMark);
//                         set.add(curMark);
//                     }
//                 }
//                 res = Math.max(res, cnt);
//                 grid[i][j] = 0; // 回溯
//             }
//         }
//         return res == 0 ? rowSize * colSize : res;
//     }

//     public void dfs(int[][] grid, int row, int col, int mark) {
//         if(0 > row || row >= grid.length || col < 0 || col >= grid[0].length || grid[row][col] != 1) return;
//         grid[row][col] = mark;
//         count++;
//         dfs(grid, row + 1, col, mark);
//         dfs(grid, row - 1, col, mark);
//         dfs(grid, row, col + 1, mark);
//         dfs(grid, row, col - 1, mark);
//     }
// }
