在本问题中，有根树指满足以下条件的 有向 图。该树只有一个根节点，所有其他节点都是该根节点的后继。该树除了根节点之外的每一个节点都有且只有一个父节点，而根节点没有父节点。

输入一个有向图，该图由一个有着 n 个节点（节点值不重复，从 1 到 n）的树及一条附加的有向边构成。附加的边包含在 1 到 n 中的两个不同顶点间，这条附加的边不属于树中已存在的边。

结果图是一个以边组成的二维数组 edges 。 每个元素是一对 [ui, vi]，用以表示 有向 图中连接顶点 ui 和顶点 vi 的边，其中 ui 是 vi 的一个父节点。

返回一条能删除的边，使得剩下的图是有 n 个节点的有根树。若有多个答案，返回最后出现在给定二维数组的答案。


class Solution {
    int n = 1001;
    int[] father = new int[n];

    public void init() {
        for (int i = 0; i < father.length; i++) {
            father[i] = i;
        }
    }

    public int find(int u) {
        if (u == father[u])
            return u;
        else {
            father[u] = find(father[u]);
            return father[u];
        }
    }

    public boolean isSame(int u, int v) {
        u = find(u);
        v = find(v);
        return u == v;
    }

    public void join(int u, int v) {
        u = find(u);
        v = find(v);
        if (u == v)
            return;
        father[v] = u;
    }

    public int[] getRemoveEdge(int[][] edges) {
        init();
        for (int i = 0; i < edges.length; i++) {
            if (isSame(edges[i][0], edges[i][1])) {
                // 构成有向环了，一定不是树
                return edges[i];
            } else {
                join(edges[i][0], edges[i][1]);
            }
        }
        return null;
    }

    public boolean isTreeAfterRemoveEdge(int[][] edges, int deleEdge) {
        init();
        for (int i = 0; i < edges.length; i++) {
            if (i == deleEdge)
                continue;
            if (isSame(edges[i][0], edges[i][1])) {
                // 构成有向环了，一定不是树
                return false;
            } else {
                join(edges[i][0], edges[i][1]);
            }
        }
        return true;
    }

    public int[] findRedundantDirectedConnection(int[][] edges) {
        // 统计所有节点的入度
        int[] inDegree = new int[n];
        for (int i = 0; i < edges.length; i++) {
            inDegree[edges[i][1]] += 1;
        }
        List<Integer> twoDegree = new ArrayList<>();
        // 找入度为2的节点所对应的边，注意要倒序，因为优先返回最后出现在二维数组中的答案
        for (int i = edges.length - 1; i >= 0; i--) {
            if (inDegree[edges[i][1]] == 2) {
                twoDegree.add(i);
            }
        }
        // 如果有入度为2的节点，那么一定是两条边里删一个，看删哪个可以构成树
        if (!twoDegree.isEmpty()) {
            if (isTreeAfterRemoveEdge(edges, twoDegree.get(0))) {
                return edges[twoDegree.get(0)];
            } else
                return edges[twoDegree.get(1)];
        }
        // 明确没有入度为2的情况，那么一定有有向环，找到构成环的边返回就可以了
        return getRemoveEdge(edges);
    }
}
