给你一个含重复值的二叉搜索树（BST）的根节点 root ，找出并返回 BST 中的所有 众数（即，出现频率最高的元素）。

如果树中有不止一个众数，可以按 任意顺序 返回。

假定 BST 满足如下定义：

结点左子树中所含节点的值 小于等于 当前节点的值
结点右子树中所含节点的值 大于等于 当前节点的值
左子树和右子树都是二叉搜索树


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    TreeNode pre = null;
    int count = 0, maxCount = 0;
    List<Integer> res = new ArrayList<>();

    public int[] findMode(TreeNode root) {
        traversal(root);
        int[] result = new int[res.size()];
        for (int i = 0; i < res.size(); i++) {
            result[i] = res.get(i);
        }
        return result;
    }

    void traversal(TreeNode cur) {
        if (cur == null)
            return;
        traversal(cur.left);
        if (pre == null)
            count = 1;
        else if (pre.val == cur.val)
            count++;
        else
            count = 1;
        pre = cur;
        if (count == maxCount)
            res.add(cur.val);
        if (count > maxCount) {
            maxCount = count;
            res.clear();
            res.add(cur.val);
        }
        traversal(cur.right);
    }
}
