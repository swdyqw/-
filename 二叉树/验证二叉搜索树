给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。

有效 二叉搜索树定义如下：

节点的左子树只包含 小于 当前节点的数。
节点的右子树只包含 大于 当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。

// 暴力
class Solution {
    public boolean isValidBST(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        inorder(root, res);
        for (int i = 1; i < res.size(); i++) {
            if (res.get(i - 1) >= res.get(i))
                return false;
        }
        return true;
    }

    void inorder(TreeNode root, List<Integer> res) {
        if (root == null)
            return;
        inorder(root.left, res);
        res.add(root.val);
        inorder(root.right, res);
    }
}

// 递归
class Solution {
    long max = Long.MIN_VALUE;

    public boolean isValidBST(TreeNode root) {
        if (root == null)
            return true;
        boolean left = isValidBST(root.left); // 左
        if (max < root.val) // 中
            max = root.val;
        else
            return false;
        boolean right = isValidBST(root.right); // 右
        return left && right;
    }
}

// 双指针
class Solution {
    TreeNode pre;

    public boolean isValidBST(TreeNode root) {
        if (root == null)
            return true;
        boolean left = isValidBST(root.left); // 左
        if (pre != null && pre.val >= root.val) // 中
            return false;
        pre = root;
        boolean right = isValidBST(root.right); // 右
        return left && right;
    }
}
