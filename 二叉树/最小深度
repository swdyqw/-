给定一个二叉树，找出其最小深度。

最小深度是从根节点到最近叶子节点的最短路径上的节点数量。

说明：叶子节点是指没有子节点的节点。

迭代遍历
class Solution {
    public int minDepth(TreeNode root) {
        ArrayDeque<TreeNode> deque = new ArrayDeque<>();
        if (root != null)
            deque.push(root);
        int maxDepth = 0;
        while (!deque.isEmpty()) {
            int size = deque.size();
            while (size-- != 0) {
                TreeNode cur = deque.pollFirst();
                if (cur.left != null)
                    deque.addLast(cur.left);
                if (cur.right != null)
                    deque.addLast(cur.right);
                if (cur.left == null && cur.right == null)
                    return maxDepth+1;
            }
            maxDepth++;
        }
        return maxDepth;
    }
}

// 当左右孩子都为空的时候，才说明遍历的最低点了

// 递归遍历
class Solution {
    public int minDepth(TreeNode root) {
        if(root == null) return 0;
        int leftHeight = minDepth(root.left);
        int rightHeight = minDepth(root.right);
        if(root.left==null&&root.right!=null) return rightHeight+1;
        if(root.left!=null&&root.right==null) return leftHeight+1;
        return Math.min(leftHeight,rightHeight)+1;
    }
}
