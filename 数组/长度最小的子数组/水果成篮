//你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。
//
//        你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：
//
//        你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。
//        你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。
//        一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。
//        给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。
//示例 1：
//
//        输入：fruits = [1,2,1]
//        输出：3
//        解释：可以采摘全部 3 棵树。
//        示例 2：
//
//        输入：fruits = [0,1,2,2]
//        输出：3
//        解释：可以采摘 [1,2,2] 这三棵树。
//        如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。


class Solution{
    public int totalFruit(int[] fruits){
        int[] cnt = new int[fruits.length + 1];
        int left=0,right=0;
        int res = 0;
        int valid =0;
        for (;right<fruits.length;right++){
            cnt[fruits[right]]++;
            if (cnt[fruits[right]]==1)
                valid++;
            while (valid>2){
                cnt[fruits[left]]--;
                if (cnt[fruits[left]]==0)
                    valid--;
                left++;
            }
            res = Math.max(res,right-left+1);
        }
        return res;
    }

}

import java.util.HashMap;

class Solution {
    public int totalFruit(int[] fruits) {
        int result = 0;
        int left = 0;
        HashMap<Integer, Integer> cnt = new HashMap<>();
        for (int right = 0; right < fruits.length; right++) {
            cnt.put(fruits[right], cnt.getOrDefault(fruits[right], 0) + 1);
            while (cnt.size() > 2) {
                cnt.put(fruits[left], cnt.get(fruits[left]) - 1);
                if (cnt.get(fruits[left]) == 0) {
                    cnt.remove(fruits[left]);
                }
                left++;
            }
            result = Math.max(result, right - left + 1);
        }
        return result;
    }
}

////最小滑窗模板：给定数组 nums，定义滑窗的左右边界 i, j，求满足某个条件的滑窗的最小长度。
//while j < len(nums):
//        判断[i, j]是否满足条件
//        while 满足条件：
//        不断更新结果(注意在while内更新！)
//        i += 1 （最大程度的压缩i，使得滑窗尽可能的小）
//        j += 1
//
////        最大滑窗模板：给定数组 nums，定义滑窗的左右边界 i, j，求满足某个条件的滑窗的最大长度。
//        while j < len(nums):
//        判断[i, j]是否满足条件
//        while 不满足条件：
//        i += 1 （最保守的压缩i，一旦满足条件了就退出压缩i的过程，使得滑窗尽可能的大）
//        不断更新结果（注意在while外更新！）
//        j += 1
