package 数组.移除元素;

//给你一个 非严格递增排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。
//
//        考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：
//
//        更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。
//        返回 k 。

class Solution {
    public int removeDuplicates(int[] nums) {
        int slowIndex = 0;
        for(int fastIndex=1;fastIndex<nums.length;fastIndex++){
            if(nums[fastIndex]!=nums[slowIndex]){
                nums[++slowIndex]=nums[fastIndex];
            }
        }
        return slowIndex;
    }
}

//为了让解法更具有一般性，我们将原问题的「最多保留 1 位」修改为「最多保留 k 位」。
//
//        对于此类问题，我们应该进行如下考虑：
//
//        由于是保留 k 个相同数字，对于前 k 个数字，我们可以直接保留。
//        对于后面的任意数字，能够保留的前提是：与当前写入的位置前面的第 k 个元素进行比较，不相同则保留。
//        举个🌰，我们令 k=1，假设有样例：[3,3,3,3,4,4,4,5,5,5]
//
//        设定变量 idx，指向待插入位置。idx 初始值为 0，目标数组为 []
//
//        首先我们先让第 1 位直接保留（性质 1）。idx 变为 1，目标数组为 [3]
//
//        继续往后遍历，能够保留的前提是与 idx 的前面 1 位元素不同（性质 2），因此我们会跳过剩余的 3，将第一个 4 追加进去。idx 变为 2，目标数组为 [3,4]
//
//        继续这个过程，跳过剩余的 4，将第一个 5 追加进去。idx 变为 3，目标数组为 [3,4,5]
//
//        当整个数组被扫描完，最终我们得到了目标数组 [3,4,5] 和 答案 idx 为 3
//
//        作者：宫水三叶
//        链接：https://leetcode.cn/problems/remove-duplicates-from-sorted-array/solutions/575549/shua-chuan-lc-jian-ji-shuang-zhi-zhen-ji-2eg8/
//        来源：力扣（LeetCode）
//        著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

class Solution {
    public int removeDuplicates(int[] nums) {
        return process(nums, 1);
    }
    int process(int[] nums, int k) {
        int idx = 0;
        for (int x : nums) {
            if (idx < k || nums[idx - k] != x) nums[idx++] = x;
        }
        return idx;
    }
}

