给定一个候选人编号的集合 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的每个数字在每个组合中只能使用 一次 。

注意：解集不能包含重复的组合。

class Solution {
    List<Integer> path = new ArrayList<>();
    List<List<Integer>> result = new ArrayList<>();
    int[] used;

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        used = new int[candidates.length];// 在外面声明，主函数创建对象，可以在所有函数使用
        Arrays.sort(candidates);
        backTracking(candidates, target, 0, 0);
        return result;
    }

    public void backTracking(int[] candidates, int target, int sum, int startIndex) {
        if (sum > target)
            return;
        if (sum == target) {
            result.add(new ArrayList(path));
            return;
        }
        for (int i = startIndex; i < candidates.length; i++) {
            if (i > 0 && candidates[i] == candidates[i - 1] && used[i - 1] == 0)
                continue;
            path.add(candidates[i]);
            sum += candidates[i];
            used[i] = 1;
            backTracking(candidates, target, sum, i + 1);
            path.remove(path.size() - 1);
            sum -= candidates[i];
            used[i] = 0;
        }
    }
}
