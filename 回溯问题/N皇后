按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。

n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。

给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。

每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。

class Solution {
    List<List<String>> result = new ArrayList<>();

    public List<List<String>> solveNQueens(int n) {
        char[][] chessboard = new char[n][n];
        for (char[] c : chessboard) {
            Arrays.fill(c, '.');
        }
        backTrack(chessboard, 0, n);
        return result;
    }

    public void backTrack(char[][] chessboard, int row, int n) {
        if (row == n) {
            result.add(Array2List(chessboard));
            return;
        }
        for (int col = 0; col < n; col++) {
            if (isValid(chessboard, row, col, n)) {
                chessboard[row][col] = 'Q';
                backTrack(chessboard, row + 1, n);
                chessboard[row][col] = '.';
            }
        }
    }

    public List Array2List(char[][] chessboard) {
        List<String> res = new ArrayList<>();
        for (char[] c : chessboard) {
            res.add(String.copyValueOf(c));
        }
        return res;
    }

    public boolean isValid(char[][] chessboard, int row, int col, int n) {
        // 因为回溯时每行只取一个，所以不需要判断同行结果
        // 同列
        for (int i = 0; i < row; i++) {
            if (chessboard[i][col] == 'Q')
                return false;
        }
        // 45度角
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (chessboard[i][j] == 'Q')
                return false;
        }
        // 135度角
        for (int i = row - 1, j = col+1; i >= 0 && j <= n - 1; i--, j++) {
            if (chessboard[i][j] == 'Q')
                return false;
        }
        return true;
    }
}
