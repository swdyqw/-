设备中存有 n 个文件，文件 id 记于数组 documents。若文件 id 相同，则定义为该文件存在副本。请返回任一存在副本的文件 id。

 

示例 1：

输入：documents = [2, 5, 3, 0, 5, 0]
输出：0 或 5

0 ≤ documents[i] ≤ n-1
2 <= n <= 100000

class Solution {
    public int findRepeatDocument(int[] documents) {
        // 暴力
        // int[] hash = new int[100001];
        // for (int i = 0; i < documents.length; i++) {
        //     hash[documents[i]]++;
        // }
        // for (int i = 0; i < hash.length; i++) {
        //     if (hash[i] > 1)
        //         return i;
        // }
        // return -1;

        //原地交换
        for(int i = 0;i<documents.length;){
            if(documents[i]==i){
                i++;
                continue;
            }
            if(documents[i]==documents[documents[i]]){
                return documents[i];
            }
            else{
                // 交换后不能直接遍历下一个元素
                int temp = documents[documents[i]];
                documents[documents[i]] = documents[i];
                documents[i] = temp;
            }
        }
        return -1;
    }
}



在一个长度为 n+1 的数组里的所有数字都在 1 到 n 的范围内。 所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字。但不能修改输入的数组。例如，如果输入长度为 7 的数组 {2, 3, 5, 4, 3, 2, 6, 7}，那么对应的输出是第一个重复的数字 2 或 3 。



    public int getDuplication(int[] numbers, int length) {
        if (numbers == null || length <= 0) {
            return -1;
        }
        int start = 1, end = length - 1, mid;
        while (start <= end) {
            mid = (start + end) / 2;
            int count = countRange(numbers, start, mid);
            if (start == end) {
                if (count > 1) {
                    return start;
                } else {
                    return -1;
                }
            }
            if (count > mid - start + 1) {
                end = mid;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }

    private int countRange(int[] numbers, int low, int high) {
        int count = 0;
        for (int number : numbers) {
            if (number >= low && number <= high) {
                count++;
            }
        }
        return count;
    }
