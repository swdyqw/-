// 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。

class Solution {
    public int search(int[] nums, int target) {
        int left = 0, right = nums.length;
        while(left < right){
            int mid = (left + right) >>> 1;
            if(target < nums[mid]){
                right = mid;
            }else if(nums[mid] < target){
                left = mid + 1;
            }else{
                return mid;
            }
        }
        return -1;
    }
}


// 给你一个非负整数 x ，计算并返回 x 的 算术平方根 。

// 由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。

// 注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。

class Solution {
    public int mySqrt(int x) {
        // if(x==1){
        //     return 1;
        // }
        int left = 0, right = x, ans = -1;
        while(left <= right){
            int mid = left + right >>> 1;
            if(x<(long)mid*mid){
                right = mid-1;
            }else if((long)mid*mid<x){
                // long型放大数
                ans = mid;
                left = mid+1;
            }else{
                return mid;
            }
        }
        return ans;
    }
}


//给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。
//
//        如果数组中不存在目标值 target，返回 [-1, -1]。
//
//        你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int leftBorder = searchLeftBorder(nums, target);
        int rightBorder = searchRightBorder(nums, target);
//        情况一：target 在数组范围的右边或者左边，例如数组{3, 4, 5}，target为2或者数组{3, 4, 5},target为6，此时应该返回{-1, -1}
        if (leftBorder == -2 || rightBorder == -2) return new int[]{-1, -1};
//        情况三：target 在数组范围中，且数组中存在target，例如数组{3,6,7},target为6，此时应该返回{1, 1}
        if (rightBorder - leftBorder > 0) return new int[]{leftBorder, rightBorder - 1};
//        情况二：target 在数组范围中，且数组中不存在target，例如数组{3,6,7},target为5，此时应该返回{-1, -1}
        return new int[]{-1, -1};
    }

    public int searchRightBorder(int[] nums, int target) {
        int left = 0, right = nums.length, rightborder = -2;
        while (left < right) {
            int mid = left + right >>> 1;
            if (target < nums[mid]) {
                right = mid;
            } else {
                left = mid + 1;
                rightborder = left;
            }
        }
        return rightborder;
    }

    public int searchLeftBorder(int[] nums, int target) {
        int left = 0, right = nums.length, leftborder = -2;
        while (left < right) {
            int mid = left + right >>> 1;
            if (target <= nums[mid]) {
                right = mid;
                leftborder = right;
            } else {
                left = mid + 1;
            }
        }
        return leftborder;
    }
}
